// * ========================= * //
// * ------- LIBRARIES ------- * //
// * ========================= * //

	#include "GaudiKernel/SmartDataPtr.h"
	#include "EventModel/EventHeader.h"
	#include "McTruth/McParticle.h"
	#include "MctruthForTopoAnaAlg/MctruthForTopoAna.h"
	// #include <iostream>
	// #include <iomanip>



// * =========================== * //
// * ------- CONSTRUCTOR ------- * //
// * =========================== * //

	/// Constructor for this class is emptry, but needs to be defined, because it inherits from `Algorithm`.
	MctruthForTopoAna::MctruthForTopoAna(const std::string & name,ISvcLocator * pSvcLocator): Algorithm(name,pSvcLocator) {}



// * =============================== * //
// * ------- ALGORITHM STEPS ------- * //
// * =============================== * //


	/// Book `NTuple` for MC truth.
	/// The contents of this `NTuple` are required for the `topoana` package to function properly.
	StatusCode MctruthForTopoAna::initialize()
	{
		/// <ol>
		/// <li> Create log stream (`MsgStream` object).
			MsgStream log(msgSvc(),name());
			log << MSG::INFO << "in initialize()" << endmsg;
		/// <li> Book `NTuple` called `"MctruthForTopoAna"`. A selection of MC truth data will be written to this `TTree`. This tree contains:
			NTuplePtr nt(ntupleSvc(),"FILE1/MctruthForTopoAna");
			if(nt) m_tuple=nt;
			else {
				m_tuple=ntupleSvc()->book("FILE1/MctruthForTopoAna",CLID_ColumnWiseTuple,"Mctruth For Topology Analysis");
				if(m_tuple) {
					/// <ul>
					m_tuple->addItem("Ievt",  m_ievt);  /// <li> `"Ievt"`: @b counter for number of events (not the ID!).
					m_tuple->addItem("Runid", m_runid); /// <li> `"Runid"`: run number ID.
					m_tuple->addItem("Evtid", m_evtid); /// <li> `"Evtid"`: event number ID.
					m_tuple->addItem("Nmcps", m_nmcps, 0, 100); /// <li> `"Nmcps"`: number of MC particles stored for this event. This one is necessary for loading following two items, because they are arrays.
					m_tuple->addIndexedItem("Pid",  m_nmcps, m_pid); /// <li> `"Pid"` (array): PDG code for the particle in this array.
					m_tuple->addIndexedItem("Midx", m_nmcps, m_midx); /// <li> `"Midx"` (array): track index of the mother particle (corrected with `rootIndex`).
					/// </ul>
				} else {
					log << MSG::ERROR << "Cannot book N-tuple:" << long(m_tuple) << endmsg;
					/// <li> Abort if booking the `NTuple` has failed.
					return StatusCode::FAILURE;
				}
			}
		/// <li> Reset counter for number of events.
			m_ievt = 0;
		/// </ol>
		return StatusCode::SUCCESS;
	}


	/// Write MC truth properties <i>for each event</i>.
	int ievt=0;
	StatusCode MctruthForTopoAna::execute()
	{
		/// <ol>
		/// <li> Create log stream object and increase counter for number of events.
			MsgStream log(msgSvc(), name());
			++m_ievt;
			// std::cout << std::endl << std::endl;
			// std::cout << "ievt = " << ievt << std::endl;

		/// <li> Load event from DST file and get run and event number.
			SmartDataPtr<Event::EventHeader> eventHeader(eventSvc(),"/Event/EventHeader");
			m_runid=eventHeader->runNumber();
			m_evtid=eventHeader->eventNumber();
			// std::cout << "RunNo=" << m_runid << std::endl;
			// std::cout << "EvtNo=" << m_evtid << std::endl;

		/// <li> Load `McParticelCol` from `"/Event/MC/McParticleCol"` directory in `"FILE1"` input file and @b abort if does not exist. @b Terminate if this collection does not exist and @b `continue` if this collection is empty.
			SmartDataPtr<Event::McParticleCol> mcParticleCol(eventSvc(),"/Event/MC/McParticleCol");
			if(!mcParticleCol) {
				std::cout << "Could not retrieve McParticelCol" << std::endl;
				return StatusCode::FAILURE;
			}
			if(!mcParticleCol->size()) return StatusCode::SUCCESS;

		/// <li> Set up counters and switches for the loop.
			/// <ul>
			m_nmcps = 0;       /// <li> Reset the `m_nmcps` counter for the number of MC particles.
			int rootIndex(-1); /// <li> This will be the `trackIndex` of the initial cluster (particle property 91) or string (particle property 92).
			/// </ul>

		/// <li> Loop over collection of MC particle objects. An array containing a selection of MC truth particles is created here.
			std::cout << "Stored MC truth particle collection:" << std::endl;
			for(Event::McParticleCol::iterator it = mcParticleCol->begin(); it!=mcParticleCol->end(); ++it) {
			/// <ul>
			/// <li> @b Skip if it is not a primary particle or if the decay was not from a generator.
				if( (*it)->primaryParticle())    continue;
				if(!(*it)->decayFromGenerator()) continue; /// @todo Why? What does coming from a generator mean precisely?
			/// <li> The `rootIndex` variable is used as a switch to skip all particles in the decay chain that come before the generator 'cluster' (code 91) or 'string' (92), such as the \f$Z^0\f$ boson right after the \f$e^+e^-\f$ collision.
				if(
					(*it)->particleProperty() == 91 ||
					(*it)->particleProperty() == 92 ) {
					rootIndex = (*it)->trackIndex();
					continue;
				}
				if(rootIndex<0) continue;
			/// <li> Store PDG code of this MC particle (`m_pid`).
				m_pid[m_nmcps] = (*it)->particleProperty();
			/// <li> Store a array index of the mother. This ID is `-1` if it is the initial cluster (e.g. \f$J/\psi\f$).
				m_midx[m_nmcps] = (*it)->mother().trackIndex()-rootIndex-1;
			// * <i>Debug output</i> Table of stored particles and their indices. *
				std::endl
					<< std::setw(3) << m_nmcps
					<< std::setw(4) << (*it)->trackIndex()
					<< std::setw(7) << (*it)->particleProperty();
				if(!(*it)->primaryParticle()) std::endl
					<< " | "
					<< std::setw(4) << (*it)->mother().trackIndex()-rootIndex-1
					<< std::setw(7) << (*it)->mother().particleProperty();
				std::endl << std::endl;
			/// <li> Increment `m_nmcps` array index.
				m_nmcps++;
			/// </ul>
			}

		/// <li> @b Write info stored in the loop to the `"MctruthForTopoAna"` `TTree`.
			m_tuple->write();

		/// </ol>
		return StatusCode::SUCCESS;
	}


	/// Print number of events.
	StatusCode MctruthForTopoAna::finalize()
	{
		MsgStream log(msgSvc(), name());
		std::cout << "ievt=" << ievt << std::endl;
		log << MSG::INFO << "in finalize()" << endmsg;
		return StatusCode::SUCCESS;
	}